{
  "info": {
    "name": "Test Explore With Me - Comment",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Добавление комментариев",
      "item": [
        {
          "name": "Добавление комментария",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const commentText = rnd.getComment();",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 201 и данные в формате json', function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const source = JSON.parse(pm.request.body.raw);",
                  "const target = pm.response.json();",
                  "",
                  "pm.test('Событие должно содержать поля: id, content, user, createdOn', function () {",
                  "    pm.expect(target).to.have.property('id');",
                  "    pm.expect(target).to.have.property('content');",
                  "    pm.expect(target).to.have.property('user');",
                  "    pm.expect(target).to.have.property('createdOn');",
                  "});",
                  "",
                  "pm.test('Данные в ответе должны соответствовать данным в запросе', function () {",
                  "    pm.expect(target.id).to.not.be.null;",
                  "    pm.expect(target.content).equal(source.content, 'Текст комментария должен соответствовать тексту в запросе');",
                  "    pm.expect(target.event).equal(source.event, 'ID события должен соответствовать ID события в запросе');",
                  "    pm.expect(target.user.name).equal(source.userName, 'Имя юзера должен соответствовать имени юзера в запросе');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление комментария с пустым текстом",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const commentText = rnd.getComment();",
                  "",
                  "        const comment = {",
                  "            content: \"\",",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление комментария с текстом >1500 символов",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const commentText = rnd.getWord(1501);",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление комментария с 1500 символами",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const commentText = rnd.getWord(1500);",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 201 и данные в формате json', function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const source = JSON.parse(pm.request.body.raw);",
                  "const target = pm.response.json();",
                  "",
                  "pm.test('Событие должно содержать поля: id, content, user, createdOn', function () {",
                  "    pm.expect(target).to.have.property('id');",
                  "    pm.expect(target).to.have.property('content');",
                  "    pm.expect(target).to.have.property('user');",
                  "    pm.expect(target).to.have.property('createdOn');",
                  "});",
                  "",
                  "pm.test('Данные в ответе должны соответствовать данным в запросе', function () {",
                  "    pm.expect(target.id).to.not.be.null;",
                  "    pm.expect(target.content).equal(source.content, 'Текст комментария должен соответствовать тексту в запросе');",
                  "    pm.expect(target.event).equal(source.event, 'ID события должен соответствовать ID события в запросе');",
                  "    pm.expect(target.user.name).equal(source.userName, 'Имя юзера должен соответствовать имени юзера в запросе');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление комментария с 1 символом",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const commentText = rnd.getWord(1);",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 201 и данные в формате json', function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const source = JSON.parse(pm.request.body.raw);",
                  "const target = pm.response.json();",
                  "",
                  "pm.test('Событие должно содержать поля: id, content, user, createdOn', function () {",
                  "    pm.expect(target).to.have.property('id');",
                  "    pm.expect(target).to.have.property('content');",
                  "    pm.expect(target).to.have.property('user');",
                  "    pm.expect(target).to.have.property('createdOn');",
                  "});",
                  "",
                  "pm.test('Данные в ответе должны соответствовать данным в запросе', function () {",
                  "    pm.expect(target.id).to.not.be.null;",
                  "    pm.expect(target.content).equal(source.content, 'Текст комментария должен соответствовать тексту в запросе');",
                  "    pm.expect(target.event).equal(source.event, 'ID события должен соответствовать ID события в запросе');",
                  "    pm.expect(target.user.name).equal(source.userName, 'Имя юзера должен соответствовать имени юзера в запросе');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление комментария к неопубликованному событию",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const commentText = rnd.getComment();",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление комментария к несуществующему событию",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id + 1);\r",
                  "        const commentText = rnd.getComment();",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление комментария несуществующим юзером",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id + 1);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const commentText = rnd.getComment();",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление комментария без события",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const commentText = rnd.getComment();",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId}/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "{{eid}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Обновление комментариев",
      "item": [
        {
          "name": "Обновление комментария",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "        const commentText = rnd.getWord(40);",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const source = JSON.parse(pm.request.body.raw);",
                  "const target = pm.response.json();",
                  "",
                  "pm.test('Событие должно содержать поля: id, content, user, createdOn', function () {",
                  "    pm.expect(target).to.have.property('id');",
                  "    pm.expect(target).to.have.property('content');",
                  "    pm.expect(target).to.have.property('user');",
                  "    pm.expect(target).to.have.property('createdOn');",
                  "});",
                  "",
                  "pm.test('Данные в ответе должны соответствовать данным в запросе', function () {",
                  "    pm.expect(target.id).to.not.be.null;",
                  "    pm.expect(target.content).equal(source.content, 'Текст комментария должен соответствовать тексту в запросе');",
                  "    pm.expect(target.event).equal(source.event, 'ID события должен соответствовать ID события в запросе');",
                  "    pm.expect(target.user.name).equal(source.userName, 'Имя юзера должен соответствовать имени юзера в запросе');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Обновление комментария c пустым текстом",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "        const commentText = \"\";",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Обновление комментария c текстом >1500 cимволов",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "        const commentText = rnd.getWord(1501);",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Обновление комментария с 1500 символами",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "        const commentText = rnd.getWord(1500);",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const source = JSON.parse(pm.request.body.raw);",
                  "const target = pm.response.json();",
                  "",
                  "pm.test('Событие должно содержать поля: id, content, user, createdOn', function () {",
                  "    pm.expect(target).to.have.property('id');",
                  "    pm.expect(target).to.have.property('content');",
                  "    pm.expect(target).to.have.property('user');",
                  "    pm.expect(target).to.have.property('createdOn');",
                  "});",
                  "",
                  "pm.test('Данные в ответе должны соответствовать данным в запросе', function () {",
                  "    pm.expect(target.id).to.not.be.null;",
                  "    pm.expect(target.content).equal(source.content, 'Текст комментария должен соответствовать тексту в запросе');",
                  "    pm.expect(target.event).equal(source.event, 'ID события должен соответствовать ID события в запросе');",
                  "    pm.expect(target.user.name).equal(source.userName, 'Имя юзера должен соответствовать имени юзера в запросе');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Обновление комментария с 1 символом",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "        const commentText = rnd.getWord(1);",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const source = JSON.parse(pm.request.body.raw);",
                  "const target = pm.response.json();",
                  "",
                  "pm.test('Событие должно содержать поля: id, content, user, createdOn', function () {",
                  "    pm.expect(target).to.have.property('id');",
                  "    pm.expect(target).to.have.property('content');",
                  "    pm.expect(target).to.have.property('user');",
                  "    pm.expect(target).to.have.property('createdOn');",
                  "});",
                  "",
                  "pm.test('Данные в ответе должны соответствовать данным в запросе', function () {",
                  "    pm.expect(target.id).to.not.be.null;",
                  "    pm.expect(target.content).equal(source.content, 'Текст комментария должен соответствовать тексту в запросе');",
                  "    pm.expect(target.event).equal(source.event, 'ID события должен соответствовать ID события в запросе');",
                  "    pm.expect(target.user.name).equal(source.userName, 'Имя юзера должен соответствовать имени юзера в запросе');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Обновление несуществующего комментария",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id + 1);\r",
                  "        const commentText = rnd.getWord(40);",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Обновление комментария не автором",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id + 1);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "        const commentText = rnd.getWord(40);",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Удаление комментариев",
      "item": [
        {
          "name": "Удаления комментария",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 204 и данные в формате json', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаления комментария не автором",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id + 1);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 404 и данные в формате json', function () {",
                  "    pm.response.to.have.status(404);",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаления несуществующего комментария",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id );\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id + 1);\r",
                  "",
                  "        const comment = {",
                  "            content: commentText,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 404 и данные в формате json', function () {",
                  "    pm.response.to.have.status(404);",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Получение комментариев",
      "item": [
        {
          "name": "Получения комментария по ID",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "",
                  "        const comment = {",
                  "            content: newComment.content,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const source = JSON.parse(pm.request.body.raw);",
                  "const target = pm.response.json();",
                  "",
                  "pm.test('Событие должно содержать поля: id, content, user, createdOn', function () {",
                  "    pm.expect(target).to.have.property('id');",
                  "    pm.expect(target).to.have.property('content');",
                  "    pm.expect(target).to.have.property('user');",
                  "    pm.expect(target).to.have.property('createdOn');",
                  "});",
                  "",
                  "pm.test('Данные в ответе должны соответствовать данным в запросе', function () {",
                  "    pm.expect(target.id).to.not.be.null;",
                  "    pm.expect(target.content).equal(source.content, 'Текст комментария должен соответствовать тексту в запросе');",
                  "    pm.expect(target.event).equal(source.event, 'ID события должен соответствовать ID события в запросе');",
                  "    pm.expect(target.user.name).equal(source.userName, 'Имя юзера должен соответствовать имени юзера в запросе');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получения несуществующего комментария по ID",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id + 1);\r",
                  "",
                  "        const comment = {",
                  "            content: newComment.content,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получения комментариев по ID события",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "",
                  "        const comment = {",
                  "            content: newComment.content,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);",
                  "const target = pm.response.json()[0];\r",
                  "\r",
                  "pm.test('Событие должно содержать поля: id, content, user, createdOn', function () {",
                  "    pm.expect(target).to.have.property('id');",
                  "    pm.expect(target).to.have.property('content');",
                  "    pm.expect(target).to.have.property('user');",
                  "    pm.expect(target).to.have.property('createdOn');",
                  "});",
                  "",
                  "pm.test('Данные в ответе должны соответствовать данным в запросе', function () {",
                  "    pm.expect(target.id).to.not.be.null;",
                  "    pm.expect(target.content).equal(source.content, 'Текст комментария должен соответствовать тексту в запросе');",
                  "    pm.expect(target.event).equal(source.event, 'ID события должен соответствовать ID события в запросе');",
                  "    pm.expect(target.user.name).equal(source.userName, 'Имя юзера должен соответствовать имени юзера в запросе');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/event/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "event",
                ":eventId"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "1000"
                }
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получения комментариев по ID несуществующего события",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id + 1);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "",
                  "        const comment = {",
                  "            content: newComment.content,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson).to.be.an('array');\r",
                  "    pm.expect(responseJson).to.have.lengthOf(0);\r",
                  "});\r"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/event/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "event",
                ":eventId"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "1000"
                }
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получения комментариев по ID события без Query params",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "",
                  "        const comment = {",
                  "            content: newComment.content,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);",
                  "const target = pm.response.json()[0];\r",
                  "\r",
                  "pm.test('Событие должно содержать поля: id, content, user, createdOn', function () {",
                  "    pm.expect(target).to.have.property('id');",
                  "    pm.expect(target).to.have.property('content');",
                  "    pm.expect(target).to.have.property('user');",
                  "    pm.expect(target).to.have.property('createdOn');",
                  "});",
                  "",
                  "pm.test('Данные в ответе должны соответствовать данным в запросе', function () {",
                  "    pm.expect(target.id).to.not.be.null;",
                  "    pm.expect(target.content).equal(source.content, 'Текст комментария должен соответствовать тексту в запросе');",
                  "    pm.expect(target.event).equal(source.event, 'ID события должен соответствовать ID события в запросе');",
                  "    pm.expect(target.user.name).equal(source.userName, 'Имя юзера должен соответствовать имени юзера в запросе');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/event/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "event",
                ":eventId"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "0",
                  "disabled": true
                },
                {
                  "key": "size",
                  "value": "1000",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получения комментариев по ID события, проверка size по-умолчанию",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const commentResponses = [];\n",
                  "        for (let i = 0; i < 15; i++) {\n ",
                  "            const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);\n",
                  "            commentResponses.push(newComment);\n",
                  "        }\n\n  ",
                  "        pm.collectionVariables.set(\"commentResponses\", commentResponses);\n",
                  "",
                  "        const comment = {",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "const source = pm.collectionVariables.get('commentResponses');\r",
                  "newSourceArr = Array.from(source, (x) => x.id);\r",
                  "\r",
                  "pm.test(\"Значение size по-умолчанию должно быть равным 10\", function () {\r",
                  "    pm.expect(target.length).to.equal(10);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Все найденные комментарии должны быть в списке добавленных\", function () {\r",
                  "    source.forEach(function(x){pm.expect(newSourceArr).to.include(x.id)});\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/event/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "event",
                ":eventId"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "0",
                  "disabled": true
                },
                {
                  "key": "size",
                  "value": "1000",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получения комментариев по ID пользователя",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "",
                  "        const comment = {",
                  "            content: newComment.content,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);",
                  "const target = pm.response.json()[0];\r",
                  "\r",
                  "pm.test('Событие должно содержать поля: id, content, user, createdOn', function () {",
                  "    pm.expect(target).to.have.property('id');",
                  "    pm.expect(target).to.have.property('content');",
                  "    pm.expect(target).to.have.property('user');",
                  "    pm.expect(target).to.have.property('createdOn');",
                  "});",
                  "",
                  "pm.test('Данные в ответе должны соответствовать данным в запросе', function () {",
                  "    pm.expect(target.id).to.not.be.null;",
                  "    pm.expect(target.content).equal(source.content, 'Текст комментария должен соответствовать тексту в запросе');",
                  "    pm.expect(target.event).equal(source.event, 'ID события должен соответствовать ID события в запросе');",
                  "    pm.expect(target.user.name).equal(source.userName, 'Имя юзера должен соответствовать имени юзера в запросе');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/user/:userId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "user",
                ":userId"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "1000"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получения комментариев по ID несуществующего пользователя",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id + 1);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "",
                  "        const comment = {",
                  "            content: newComment.content,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    const responseJson = pm.response.json();\r",
                  "    pm.expect(responseJson).to.be.an('array');\r",
                  "    pm.expect(responseJson).to.have.lengthOf(0);\r",
                  "});\r"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/user/:userId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "user",
                ":userId"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "1000"
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получения комментариев по ID события без Query params",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "",
                  "        const comment = {",
                  "            content: newComment.content,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);",
                  "const target = pm.response.json()[0];\r",
                  "\r",
                  "pm.test('Событие должно содержать поля: id, content, user, createdOn', function () {",
                  "    pm.expect(target).to.have.property('id');",
                  "    pm.expect(target).to.have.property('content');",
                  "    pm.expect(target).to.have.property('user');",
                  "    pm.expect(target).to.have.property('createdOn');",
                  "});",
                  "",
                  "pm.test('Данные в ответе должны соответствовать данным в запросе', function () {",
                  "    pm.expect(target.id).to.not.be.null;",
                  "    pm.expect(target.content).equal(source.content, 'Текст комментария должен соответствовать тексту в запросе');",
                  "    pm.expect(target.event).equal(source.event, 'ID события должен соответствовать ID события в запросе');",
                  "    pm.expect(target.user.name).equal(source.userName, 'Имя юзера должен соответствовать имени юзера в запросе');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/user/:userId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "user",
                ":userId"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "0",
                  "disabled": true
                },
                {
                  "key": "size",
                  "value": "1000",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получения комментариев по ID события, проверка size по-умолчанию",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const commentResponses = [];\n",
                  "        for (let i = 0; i < 15; i++) {\n ",
                  "            const newComment = await api.addComment(rnd.getComment(), commentInitiator.id, event.id);\n",
                  "            commentResponses.push(newComment);\n",
                  "        }\n\n  ",
                  "        pm.collectionVariables.set(\"commentResponses\", commentResponses);\n",
                  "",
                  "        const comment = {",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "const source = pm.collectionVariables.get('commentResponses');\r",
                  "newSourceArr = Array.from(source, (x) => x.id);\r",
                  "\r",
                  "pm.test(\"Значение size по-умолчанию должно быть равным 10\", function () {\r",
                  "    pm.expect(target.length).to.equal(10);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Все найденные комментарии должны быть в списке добавленных\", function () {\r",
                  "    source.forEach(function(x){pm.expect(newSourceArr).to.include(x.id)});\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/user/:userId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "user",
                ":userId"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "0",
                  "disabled": true
                },
                {
                  "key": "size",
                  "value": "1000",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получения комментариев по запросу",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getWord(40), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "        pm.collectionVariables.set(\"text\", newComment.content);\r",
                  "",
                  "        const comment = {",
                  "            content: newComment.content,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);",
                  "const target = pm.response.json()[0];\r",
                  "\r",
                  "pm.test('Событие должно содержать поля: id, content, user, createdOn', function () {",
                  "    pm.expect(target).to.have.property('id');",
                  "    pm.expect(target).to.have.property('content');",
                  "    pm.expect(target).to.have.property('user');",
                  "    pm.expect(target).to.have.property('createdOn');",
                  "});",
                  "",
                  "pm.test('Данные в ответе должны соответствовать данным в запросе', function () {",
                  "    pm.expect(target.id).to.not.be.null;",
                  "    pm.expect(target.content).equal(source.content, 'Текст комментария должен соответствовать тексту в запросе');",
                  "    pm.expect(target.event).equal(source.event, 'ID события должен соответствовать ID события в запросе');",
                  "    pm.expect(target.user.name).equal(source.userName, 'Имя юзера должен соответствовать имени юзера в запросе');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/search",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "search"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "1000"
                },
                {
                  "key": "text",
                  "value": "{{text}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получения комментариев по запросу с пустым Query params",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getWord(40), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "        pm.collectionVariables.set(\"text\", \"\",);\r",
                  "",
                  "        const comment = {",
                  "            content: newComment.content,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/search",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "search"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "1000"
                },
                {
                  "key": "text",
                  "value": "{{text}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получения комментариев по запросу без From и Size",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        const commentInitiator = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", commentInitiator.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const newComment = await api.addComment(rnd.getWord(40), commentInitiator.id, event.id);",
                  "        pm.collectionVariables.set(\"cid\", newComment.id);\r",
                  "        pm.collectionVariables.set(\"text\", newComment.content);\r",
                  "",
                  "        const comment = {",
                  "            content: newComment.content,",
                  "            event: event.id,",
                  "            userId: commentInitiator.id,",
                  "            userName: commentInitiator.name",
                  "        };",
                  "        ",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify(comment),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error('Ошибка при подготовке тестовых данных.', err);",
                  "    }",
                  "};",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);",
                  "const target = pm.response.json()[0];\r",
                  "\r",
                  "pm.test('Событие должно содержать поля: id, content, user, createdOn', function () {",
                  "    pm.expect(target).to.have.property('id');",
                  "    pm.expect(target).to.have.property('content');",
                  "    pm.expect(target).to.have.property('user');",
                  "    pm.expect(target).to.have.property('createdOn');",
                  "});",
                  "",
                  "pm.test('Данные в ответе должны соответствовать данным в запросе', function () {",
                  "    pm.expect(target.id).to.not.be.null;",
                  "    pm.expect(target.content).equal(source.content, 'Текст комментария должен соответствовать тексту в запросе');",
                  "    pm.expect(target.event).equal(source.event, 'ID события должен соответствовать ID события в запросе');",
                  "    pm.expect(target.user.name).equal(source.userName, 'Имя юзера должен соответствовать имени юзера в запросе');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/search",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                "search"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "0",
                  "disabled": true
                },
                {
                  "key": "size",
                  "value": "1000",
                  "disabled": true
                },
                {
                  "key": "text",
                  "value": "{{text}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addComment(comment, userId, eventId, verbose=null) {",
          "        return this.post('/users/' + userId + '/comments?eventId=' + eventId, comment, \"Ошибка при добавлении нового комментария\", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
          "    }",
          "",
          "    async findCompilation(compId, verbose=null) {",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
          "    }",
          "",
          "    async findEvent(eventId, verbose=null) {",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "",
          "                    resolve(response.json());",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "    getComment() {",
          "        const comments = [",
          "            'Отличное мероприятие!',",
          "            'С удовольствием приму участие!',",
          "            'Интересно, но у меня уже запланировано что-то другое',",
          "            'Не смогу прийти, но желаю удачи в проведении!',",
          "            'Мероприятие обещает быть увлекательным',",
          "            'Жду с нетерпением начала!',",
          "            'Буду рад поучаствовать',",
          "            'Какая тема мероприятия?'",
          "            ];",
          "        const randomIndex = Math.floor(Math.random() * comments.length);",
          "        return comments[randomIndex];",
          "    }",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getWord(length = 1) {",
          "        let result = '';",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
          "        const charactersLength = characters.length;",
          "        let counter = 0;",
          "        while (counter < length) {",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
          "            counter += 1;",
          "        }",
          "        return result;",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "name",
      "value": ""
    },
    {
      "key": "usersCount",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "request_body",
      "value": ""
    },
    {
      "key": "mail",
      "value": ""
    },
    {
      "key": "response",
      "value": ""
    },
    {
      "key": "uid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catname",
      "value": ""
    },
    {
      "key": "eid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "cid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "compid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "toCheck",
      "value": ""
    },
    {
      "key": "newDataToSet",
      "value": ""
    },
    {
      "key": "uid1",
      "value": ""
    },
    {
      "key": "reqid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catId",
      "value": ""
    },
    {
      "key": "text",
      "value": ""
    },
    {
      "key": "confirmedRequests",
      "value": ""
    },
    {
      "key": "commentResponse",
      "value": ""
    },
    {
      "key": "responseArr",
      "value": ""
    },
    {
      "key": "source1",
      "value": ""
    },
    {
      "key": "source2",
      "value": ""
    },
    {
      "key": "fromId",
      "value": "0"
    },
    {
      "key": "source",
      "value": ""
    }
  ],
  "protocolProfileBehavior": {}
}